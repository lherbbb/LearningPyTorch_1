{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "initial_id",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.776580Z",
     "start_time": "2025-07-03T20:23:46.774126Z"
    },
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.7.1\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "print(torch.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "f5237370e801f3d1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.849111Z",
     "start_time": "2025-07-03T20:23:46.844927Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(7)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# scalar\n",
    "scalar = torch.tensor(7)\n",
    "scalar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "98f7e3d71767ce0b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.870283Z",
     "start_time": "2025-07-03T20:23:46.867739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Returns n dimensions of tensor\n",
    "scalar.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "efe30604cae74cc5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.890843Z",
     "start_time": "2025-07-03T20:23:46.887411Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get tensor back as Python int\n",
    "scalar.item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "c2125ba58dda7fb2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.915140Z",
     "start_time": "2025-07-03T20:23:46.911844Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([7, 7])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Vector\n",
    "vector = torch.tensor([7, 7])\n",
    "vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "c0f61dc23c82885d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.933154Z",
     "start_time": "2025-07-03T20:23:46.930331Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vector.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "2439e11ddafc96f5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:46.952575Z",
     "start_time": "2025-07-03T20:23:46.949509Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1, 2, 3],\n",
       "        [4, 5, 6],\n",
       "        [7, 8, 9]])"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MATRIX\n",
    "MATRIX = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "MATRIX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "58f3b033863e7a2e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.091093Z",
     "start_time": "2025-07-03T20:23:47.087681Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[ 1,  2,  3],\n",
       "         [ 4,  5,  6],\n",
       "         [ 7,  8,  9]],\n",
       "\n",
       "        [[10, 11, 12],\n",
       "         [13, 14, 15],\n",
       "         [16, 17, 18]]])"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TENSOR\n",
    "TENSOR = torch.tensor([[[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n",
    "                     [[10, 11, 12], [13, 14, 15], [16, 17, 18]]])\n",
    "TENSOR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "389b1b6dfa6a2347",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.149894Z",
     "start_time": "2025-07-03T20:23:47.146864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TENSOR.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "dd8cddf595ec70f3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.178882Z",
     "start_time": "2025-07-03T20:23:47.177215Z"
    }
   },
   "outputs": [],
   "source": [
    "# Random Tensors\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96ca55d8d96a60b8",
   "metadata": {},
   "source": [
    "### Header test\n",
    "3 # makes a header (###)\n",
    "\n",
    "\n",
    "Random tensors are important because the way many neural networks learn is that they start with tensors full of random numbers and then adjust those random numbers to better represent the data.\n",
    "\n",
    "Start with random data -> look at data -> update randdom numbers -> look at data -> update random numbers.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "f864137fe86a81ea",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.202850Z",
     "start_time": "2025-07-03T20:23:47.199144Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2134, -0.5757, -0.7549, -0.6735],\n",
       "        [ 0.4630,  0.8173, -0.0069,  0.3517],\n",
       "        [ 1.3531,  0.5207,  0.8431,  1.3731]])"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a random tensor of size (3, 4)\n",
    "random_tensor = torch.randn(3, 4)\n",
    "random_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f5a5049efd2f2676",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.247255Z",
     "start_time": "2025-07-03T20:23:47.243954Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([224, 224, 3]), 3)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a random tensor with a similar shape to an image tensor\n",
    "random_image_size_tensor = torch.rand(size=(224,224,3)) # height, width, color, channels\n",
    "random_image_size_tensor.shape, random_image_size_tensor.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "e799d29632e5f37b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.329597Z",
     "start_time": "2025-07-03T20:23:47.326649Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Zeros and ones\n",
    "zeros = torch.zeros(size=(3,4))\n",
    "zeros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "3a7417af7b3a56de",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.381092Z",
     "start_time": "2025-07-03T20:23:47.377668Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1., 1., 1., 1.],\n",
       "        [1., 1., 1., 1.],\n",
       "        [1., 1., 1., 1.]])"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ones = torch.ones(size=(3,4))\n",
    "ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "d3ad131492f9918e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.450893Z",
     "start_time": "2025-07-03T20:23:47.448200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.float32"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ones.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5017bbba76832ae",
   "metadata": {},
   "source": [
    "### Creating a range of tensors and tensors-like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "4e20d2cd0ee163b3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.532100Z",
     "start_time": "2025-07-03T20:23:47.529255Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use torch.arange() , do not use torch.range()\n",
    "torch.arange(0, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "50220706440cf676",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.583846Z",
     "start_time": "2025-07-03T20:23:47.579157Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 5,  7,  9, 11, 13, 15, 17, 19])"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_to_ten = torch.arange(start=5,end=21, step = 2)\n",
    "one_to_ten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "e01579e7968315f6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.617883Z",
     "start_time": "2025-07-03T20:23:47.615143Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating tensors like\n",
    "ten_zeros = torch.zeros_like(input = one_to_ten)\n",
    "ten_zeros"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a64266f7127599b0",
   "metadata": {},
   "source": [
    "### Tensor datatypes\n",
    "\n",
    "**Notes:** Tensor datatypes is one of the 3 big errors you'll run into with PyTorch & deep learning:\n",
    "    1. Tensors not right datatype\n",
    "    2. Tensors not right shape\n",
    "    3. Tensors not on the right device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "d19f5aededc8751d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.646048Z",
     "start_time": "2025-07-03T20:23:47.642666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([3., 6., 9.])"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Float 32 Tensor\n",
    "float_32_tensor = torch.tensor([3.0, 6.0 ,9.0],\n",
    "                               dtype=None)\n",
    "float_32_tensor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "c5de9d1d1b067b4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.662892Z",
     "start_time": "2025-07-03T20:23:47.660215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.float32"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float_32_tensor.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "359a7ae363464e12",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.680946Z",
     "start_time": "2025-07-03T20:23:47.677935Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.float16"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Float 32 Tensor\n",
    "float_16_tensor = torch.tensor([3.0, 6.0 ,9.0],\n",
    "                               dtype=torch.float16, # What datatype is the tensor\n",
    "                               device=None, # Can put \"cpu\", \"cuda\". What device do you want your tensor on?\n",
    "                               requires_grad=False) # Whether you can to track gradients\n",
    "float_16_tensor.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5504dba05243ccef",
   "metadata": {},
   "source": [
    "### Getting information from tensors (Tensor attributes)\n",
    "\n",
    "1. Tensors not right datatype - to do get datatype from a tensor, can use 'tensor.dtype'\n",
    "2. Tensors not right shape - to get shape from a tensor, can use 'tensor.shape'\n",
    "3. Tensors not on the right device - to get device from a tensor, can use 'tensor.device'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "a4e42fd713df4fd1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.706864Z",
     "start_time": "2025-07-03T20:23:47.703563Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0840, -0.4836, -1.9516, -1.5015],\n",
       "        [-1.6588,  1.8670,  0.0127,  0.5034],\n",
       "        [ 0.1519, -0.5040,  0.9600,  0.5099]])"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a tensor\n",
    "some_tensor = torch.randn(3, 4)\n",
    "some_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "e1b2b9d6e8f06a33",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.745865Z",
     "start_time": "2025-07-03T20:23:47.742787Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 0.0840, -0.4836, -1.9516, -1.5015],\n",
      "        [-1.6588,  1.8670,  0.0127,  0.5034],\n",
      "        [ 0.1519, -0.5040,  0.9600,  0.5099]])\n",
      "Datatype of tensor: torch.float32\n",
      "Shape of tensor: torch.Size([3, 4])\n",
      "Device tensor is on: cpu\n"
     ]
    }
   ],
   "source": [
    "# Find out details about some tensor\n",
    "print(some_tensor)\n",
    "print(f\"Datatype of tensor: {some_tensor.dtype}\")\n",
    "print(f\"Shape of tensor: {some_tensor.shape}\")\n",
    "print(f\"Device tensor is on: {some_tensor.device}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94239c60306631cf",
   "metadata": {},
   "source": [
    "### Manipulating Tensors (Tensor operations)\n",
    "\n",
    "Tensor operations include:\n",
    "* Addition\n",
    "* Subtraction\n",
    "* Multiplication (element-wise)\n",
    "* Division\n",
    "* Matrix Multiplication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "4748a30057e5276b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.777674Z",
     "start_time": "2025-07-03T20:23:47.774551Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([11, 12, 13])"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a tensor and add 10\n",
    "tensor = torch.tensor([1, 2, 3])\n",
    "tensor + 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "8d42de70de70a7ea",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.817635Z",
     "start_time": "2025-07-03T20:23:47.814409Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([10, 20, 30])"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a tensor and multiply by 10\n",
    "tensor = torch.tensor([1, 2, 3])\n",
    "tensor * 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "29b35d5fea12e220",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.837449Z",
     "start_time": "2025-07-03T20:23:47.834516Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([-9, -8, -7])"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a tensor and subtract 10\n",
    "tensor = torch.tensor([1, 2, 3])\n",
    "tensor - 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "281faec54468e9bd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.863754Z",
     "start_time": "2025-07-03T20:23:47.860343Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([10, 20, 30])"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Try out PyTorch built-in functions (use standard above listed ways when possible)\n",
    "torch.mul(tensor, 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77aa6a910e70f68b",
   "metadata": {},
   "source": [
    "### Matrix Multiplication\n",
    "Two main ways of performing multiplication in neural networks and deep learning\n",
    "    <br>1. Element-wise multiplication\n",
    "    <br>2. Matrix multiplication\n",
    "    <br> Two main rules: 1. The inner dimensions must match 2. The resulting matrix, has the dimension of the outer dimensions\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "f2a8071496c60e02",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.880824Z",
     "start_time": "2025-07-03T20:23:47.877571Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([1, 2, 3])  *  tensor([1, 2, 3])\n",
      "Equals: tensor([1, 4, 9])\n"
     ]
    }
   ],
   "source": [
    "# Element wise multiplication\n",
    "print(tensor, \" * \", tensor)\n",
    "print(f\"Equals: {tensor * tensor}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "a72c3e6745244b5b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.899919Z",
     "start_time": "2025-07-03T20:23:47.897171Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Matrix multiplication by hand\n",
    "1*1 + 2*2 + 3*3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "9c32b2ec54db2ee3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.918167Z",
     "start_time": "2025-07-03T20:23:47.914490Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 470 μs, sys: 304 μs, total: 774 μs\n",
      "Wall time: 621 μs\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor(14)"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "value = 0\n",
    "for i in range(len(tensor)):\n",
    "        value += tensor[i] * tensor[i]\n",
    "value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "e5c69e19c694ea",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.940876Z",
     "start_time": "2025-07-03T20:23:47.937478Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 28 μs, sys: 4 μs, total: 32 μs\n",
      "Wall time: 33.1 μs\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor(14)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "torch.matmul(tensor, tensor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "acf535d2df635740",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:47.967968Z",
     "start_time": "2025-07-03T20:23:47.964449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 285 μs, sys: 237 μs, total: 522 μs\n",
      "Wall time: 440 μs\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor(14)"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "tensor @ tensor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4881001032f76b9e",
   "metadata": {},
   "source": [
    "When tensors have shape issues, we can manipulate the shape of one of our tensors using a **transpose**<br>\n",
    "A transpose switches the axes or dimensions of a given tensor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "779b6a456671b88e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:48.000737Z",
     "start_time": "2025-07-03T20:23:47.996008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 23,  29,  35],\n",
       "        [ 53,  67,  81],\n",
       "        [ 83, 105, 127]])"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tensor_a = torch.tensor([[1, 2],\n",
    "                        [3, 4],\n",
    "                        [5, 6]])\n",
    "tensor_b = torch.tensor([[7, 8],\n",
    "                        [9, 10],\n",
    "                        [11, 12]])\n",
    "tensor_a @ tensor_b.T\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fcebaa17e5fd290",
   "metadata": {},
   "source": [
    "### Finding the min, max, mean, sum, etc (tensor aggregation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "e637a4c9a9bc0614",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:48.065725Z",
     "start_time": "2025-07-03T20:23:48.062601Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a tensor\n",
    "x = torch.arange(0, 100, 10)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "ba4260bddf37fcbf",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:48.139448Z",
     "start_time": "2025-07-03T20:23:48.134820Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor x min is: 0\n",
      "tensor x max is: 90\n",
      "tensor x data type is: torch.int64\n",
      "tensor x shape is: torch.Size([10])\n",
      "tensor x mean is: 45.0\n"
     ]
    }
   ],
   "source": [
    "print(f\"tensor x min is: {x.min()}\")\n",
    "print(f\"tensor x max is: {x.max()}\")\n",
    "print(f\"tensor x data type is: {x.dtype}\")\n",
    "print(f\"tensor x shape is: {x.shape}\")\n",
    "# Must change datatype to float32 instead of long for mean\n",
    "# Wrong data type is another major issue you'll run into with PyTorch\n",
    "print(f\"tensor x mean is: {torch.mean(x.type(torch.float32))}\")\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "47fb298d6d15d792",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:48.176842Z",
     "start_time": "2025-07-03T20:23:48.172589Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the position in the tensor that has the minimum value with arginmin() -> returns index position\n",
    "x.argmin()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "7fa21b957d4d07d4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:23:48.202596Z",
     "start_time": "2025-07-03T20:23:48.199613Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(90)"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "eb9d6f383e019b37",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T20:36:37.831168Z",
     "start_time": "2025-07-03T20:36:37.818100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2361557f0fc5cbdf",
   "metadata": {},
   "source": [
    "### Reshaping, stacking, squeezing and unsqueezing tensors\n",
    "<br> * Reshaping - reshapes an input tensor to a defined shape\n",
    "<br> * View Return a view of an input tensor of certain shape but keep the same memory\n",
    "<br> * Stacking - combine multiple tensors on top of eachother (vstack) or side by side (hstack)\n",
    "<br> * Squeeze - Removes all 1 dimensions from a tensor\n",
    "<br> * Unsqueeze - add a 1 dimension to a traget tensor\n",
    "<br> * Return a view of the input with dimensions permuted (swapped) in a certain way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "996e546b7e664c1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T21:15:35.159532Z",
     "start_time": "2025-07-03T21:15:35.155863Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.]), torch.Size([9]))"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = torch.arange(1., 10.)\n",
    "x, x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "8e1083ba7f4be862",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T21:15:35.876027Z",
     "start_time": "2025-07-03T21:15:35.872619Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]])"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add an extra dimension\n",
    "x_reshape = x.reshape(1, 9)\n",
    "x_reshape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "90cee06340f60faf",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T21:17:28.103751Z",
     "start_time": "2025-07-03T21:17:28.096281Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]]), torch.Size([1, 9]))"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Change the view\n",
    "z = x.view(1, 9)\n",
    "z, z.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "ade22b0454dbee67",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T21:18:32.791815Z",
     "start_time": "2025-07-03T21:18:32.778923Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[5., 2., 3., 4., 5., 6., 7., 8., 9.]]),\n",
       " tensor([5., 2., 3., 4., 5., 6., 7., 8., 9.]))"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Changing z changes x (because view of a tensor shares the same memory aas the original)\n",
    "z[:, 0] = 5\n",
    "z, x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "348e533f0dd9ece6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-03T21:20:30.991957Z",
     "start_time": "2025-07-03T21:20:30.986443Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[5., 5., 5., 5.],\n",
       "        [2., 2., 2., 2.],\n",
       "        [3., 3., 3., 3.],\n",
       "        [4., 4., 4., 4.],\n",
       "        [5., 5., 5., 5.],\n",
       "        [6., 6., 6., 6.],\n",
       "        [7., 7., 7., 7.],\n",
       "        [8., 8., 8., 8.],\n",
       "        [9., 9., 9., 9.]])"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Stack tensors on top of eachother\n",
    "x_stacked = torch.stack([x, x, x, x], dim=1)\n",
    "x_stacked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "48acb940cdf6662a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:16:49.481210Z",
     "start_time": "2025-07-04T01:16:49.462353Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: torch.Size([1, 2, 1, 3, 1])\n",
      "Squeezed shape: torch.Size([2, 3])\n"
     ]
    }
   ],
   "source": [
    "x = torch.zeros(1, 2, 1, 3, 1)\n",
    "print(\"Original shape:\", x.shape)\n",
    "y = torch.squeeze(x)\n",
    "print(\"Squeezed shape:\", y.shape)\n",
    "# Expected output:\n",
    "# Original shape: torch.Size()\n",
    "# Squeezed shape: torch.Size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "54f334dd4c4fe160",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:16:50.574094Z",
     "start_time": "2025-07-04T01:16:50.566752Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1, 2, 3, 4, 5, 6, 7, 8, 9]])"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# torch.squeeze() - removes all single dimensions from a target tensor\n",
    "x = torch.tensor([[1, 2, 3, 4, 5, 6, 7, 8, 9]])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "5db85bbcc69fdf04",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:28:10.011890Z",
     "start_time": "2025-07-04T01:28:10.008017Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([9])"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.squeeze().shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "15f77bb37370414d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:28:11.513474Z",
     "start_time": "2025-07-04T01:28:11.510422Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([1, 9]), torch.Size([1, 1, 9]))"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# torch.unsqueeze() - adds a single dimension to a target tensor at a specific dim\n",
    "x.shape, x.unsqueeze(dim=0).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "97d1f0b6d349c166",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:33:46.108035Z",
     "start_time": "2025-07-04T01:33:46.103036Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Previous shape: torch.Size([224, 224, 3])\n",
      "New shape: torch.Size([3, 224, 224])\n"
     ]
    }
   ],
   "source": [
    "# torch.permute - rearranges the dimensions of a target tensor in a specified order\n",
    "x_original = torch.rand(size=(224,224,3)) # [Height, width, color_channels]\n",
    "\n",
    "# Permute the original tensor to rearrange the axis (or dim) order\n",
    "x_permuted = x_original.permute(2, 0, 1) # Shifts axis 0->1, 1->2, 2->0\n",
    "print(f\"Previous shape: {x_original.shape}\")\n",
    "print(f\"New shape: {x_permuted.shape}\") #[color_channels, height, width]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f47dc2ec114259",
   "metadata": {},
   "source": [
    "### Indexing (selecting data from tensors\n",
    "Indexing with PyTorch is similiar to indexing with NumPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "e7be924264a8fc93",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:47:48.417654Z",
     "start_time": "2025-07-04T01:47:48.400479Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[[1, 2, 3],\n",
       "          [4, 5, 6],\n",
       "          [7, 8, 9]]]),\n",
       " torch.Size([1, 3, 3]))"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create Tensor\n",
    "x = torch.arange(start=1, end=10).reshape(1, 3, 3)\n",
    "x, x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "dab346887a595ef5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:48:50.509607Z",
     "start_time": "2025-07-04T01:48:50.506156Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1, 2, 3],\n",
       "        [4, 5, 6],\n",
       "        [7, 8, 9]])"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's index on our new tensor\n",
    "x[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "cf2303215504b98c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:51:01.416863Z",
     "start_time": "2025-07-04T01:51:01.412855Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([1, 2, 3])"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets index on the middle bracket (dim=1)\n",
    "x[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "df07d2e49e1c03f3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T01:54:20.075229Z",
     "start_time": "2025-07-04T01:54:20.071185Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(5)"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets index on the most bracket (last dim)\n",
    "x[0][0][0] # x[0, 0, 0] also works"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "9c1b73ca662ab37",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T02:02:01.930828Z",
     "start_time": "2025-07-04T02:02:01.918586Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[2, 5, 8]])"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get all values of the 0th and 1st dimension but only index 1 of 2nd dimension\n",
    "x[:, :, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "60fb656a40674be7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T02:02:38.523974Z",
     "start_time": "2025-07-04T02:02:38.520332Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([5])"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get all values of the 0th but only the 1 index value of 1st and 2nd dimension\n",
    "x[:, 1, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "d7b29ed24275bc78",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T02:04:03.816276Z",
     "start_time": "2025-07-04T02:04:03.811868Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([9])"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[:, 2, 2]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb0b73685e0e7d78",
   "metadata": {},
   "source": [
    "### PyTorch tensors & NumPy\n",
    "\n",
    "* Data in NumPy, want in Pytorch tensor -> 'torch.from_numpy(ndarray)'\n",
    "* Pytorch tensor -> NumPy -> 'torch.tensor.numpy()'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "dc1f61ad7f12d534",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-04T02:10:29.685045Z",
     "start_time": "2025-07-04T02:10:29.681130Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([1., 2., 3., 4., 5., 6., 7.], dtype=torch.float64),\n",
       " array([1., 2., 3., 4., 5., 6., 7.]))"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array = np.arange(1.0, 8.0)\n",
    "tensor = torch.from_numpy(array)\n",
    "tensor, array\n",
    "# Be aware NumPy to pytorch default is float64, while PyTorch is normally float32"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
